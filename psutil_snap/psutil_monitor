#!/usr/bin/python

import csv
import psutil
import pandas as pd
import time
import os
from datetime import datetime
import pytz

def get_size(bytes, suffix=''):
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
        if abs(bytes) < 1024.0:
            return "%3.1f%s%s" % (bytes, unit, suffix)
        bytes /= 1024.0
    return "%.1f%s%s" % (bytes, 'Yi', suffix)

def get_processes_info():
    # the list the contain all process dictionaries
    processes = []
    for process in psutil.process_iter():
      if(process.pid!=os.getpid() and process.name()!='systemd-journal'):
           pid = process.pid
           if pid == 0:
                # System Idle Process for Windows NT, useless to see anyways
               continue
           name = process.name()
           p = psutil.Process(pid)
           cpu_usage = process.cpu_percent()
           mem_usage=p.memory_percent()
           status = process.status()
           #cwd=p.cwd()
           # get the time the process was spawned
           try:
               create_time = datetime.fromtimestamp(process.create_time())
           except OSError:
                # system processes, using boot time instead
               create_time = datetime.fromtimestamp(psutil.boot_time())
           except OSError:
                # system processes, using boot time instead
               create_time = datetime.fromtimestamp(psutil.boot_time())

           uptime=time.time() - process.create_time()
           #uptime=time.strftime('%H:%M:%S', time.gmtime(uptime))
           if (uptime<60):
               uptime=round((uptime/60),2)
           #try:
           #    username = process.username()
           #except psutil.AccessDenied:
           #    username = "N/A"
           #try:
           #    exe = process.exe()
           #except psutil.AccessDenied:
           #    exe = "Access to full path denied"
           processes.append({
                 'pid': pid, 'name': name,'status': status,'cpu_usage':cpu_usage,
                 'memory_usage':mem_usage,'found_ratio':uptime
           })
    return(processes)
if __name__ == "__main__":
    counter = 0
    UTC = pytz.utc
    IST = pytz.timezone('Europe/Athens')
    datetime_ist=datetime.now(IST)
    current_time=datetime_ist.strftime('%Y:%m:%d %H:%M:%S %Z %z')
    while True:
        counter+=1
        processes=get_processes_info()
        df = pd.DataFrame(processes)
        total_memory_percent=round(df['memory_usage'].sum(),1)
        total_cpu_percent=round(df['cpu_usage'].sum(),1)
        max_cpu = df['cpu_usage'].max()
        max_mem=round(df['memory_usage'].max(),1)
        df['memory_usage']=df['memory_usage'].apply(get_size)
        df = df[['pid', 'name','status','found_ratio','cpu_usage','memory_usage']]
        df = df[df['found_ratio']<1]
        #df.sort_values(by=['found_ratio'], inplace=True)
        #df=df.iloc[:30]
        os.system("clear")
        print("\n Max CPU(%):",max_cpu," || Max Memory(%): ",max_mem," || Total Processes:",len(processes)," 
                || Total CPU(%) Usage:",total_cpu_percent," 
                || Total Memory(%): ",total_memory_percent," 
                || ",current_time)
        if(df.empty == True):
             print("\n No process started in the last 60 seconds")
        else:
             print("\n")
             print(df.to_string(index=False))
        time.sleep(1)
        data={'max_cpu': max_cpu ,'max_mem': max_mem ,'total_processes':len(processes),
            'total_cpu':total_cpu_percent,'total_memory':total_memory_percent}
        results = os.path.expanduser('~/monitortest.csv')
        data=data.values()
        with open(results,'a',newline='') as csv_file:
             writer = csv.writer(csv_file, delimiter=',')
             writer.writerow(data)
     
